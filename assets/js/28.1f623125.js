(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{636:function(n,s,t){"use strict";t.r(s);var e=t(14),a=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("hr"),n._v(" "),s("h1",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),s("p",[n._v("最近一直在深入研究react，加上工作有点忙，没时间写博客了，把自己以前写在简书上的文章搬过来。")]),n._v(" "),s("h5",{attrs:{id:"react16推出了react-hook-react-hook使得functional组件拥有了class组件的一些特性-hook不能用在class-组件里。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react16推出了react-hook-react-hook使得functional组件拥有了class组件的一些特性-hook不能用在class-组件里。"}},[n._v("#")]),n._v(" react16推出了react hook，react hook使得functional组件拥有了class组件的一些特性，hook不能用在class 组件里。")]),n._v(" "),s("p",[s("strong",[n._v("React 中提供的 常用的hooks：")])]),n._v(" "),s("ul",[s("li",[n._v("useState：setState")]),n._v(" "),s("li",[n._v("useReducer：setState")]),n._v(" "),s("li",[n._v("useRef: ref")]),n._v(" "),s("li",[n._v("useContext: context，需配合 createContext 使用")]),n._v(" "),s("li",[n._v("useMemo: 可以对 setState 的优化")]),n._v(" "),s("li",[n._v("useEffect: 类似 componentDidMount/Update, componentWillUnmount，当效果为 componentDidMount/Update 时，总是在整个更新周期的最后（页面渲染完成后）才执行")]),n._v(" "),s("li",[n._v("useLayoutEffect: 用法与 useEffect 相同，区别在于该方法的回调会在数据更新完成后，页面渲染之前进行，该方法会阻碍页面的渲染")])]),n._v(" "),s("h5",{attrs:{id:"usestate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[n._v("#")]),n._v(" useState")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function Counter({ initialCount }) {\n  const [count, setCount] = useState(0)\n  return (\n    <>\n      Count: {count}\n      <button onClick={() => setCount(0)}>Reset</button>\n      <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>\n      <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>\n    </>\n  )\n}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p",[n._v("useState 有一个参数，该参数可传如"),s("strong",[n._v("任意类型的值")]),n._v("或者"),s("strong",[n._v("返回任意类型值的函数")]),n._v("。")]),n._v(" "),s("p",[n._v("useState 返回值为一个数组，数组的"),s("strong",[n._v("第一个参数为我们需要使用的 state，第二个参数为一个"),s("code",[n._v("setter")]),n._v("函数，可传任意类型的变量，或者一个接收 state 旧值的函数，其返回值作为 state 新值。")])]),n._v(" "),s("h5",{attrs:{id:"usereducer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usereducer"}},[n._v("#")]),n._v(" useReducer")]),n._v(" "),s("p",[n._v("useReducer 接收三个参数，"),s("strong",[n._v("第一个参数为一个 reducer 函数")]),n._v("，"),s("strong",[n._v("第二个参数是reducer的初始值")]),n._v("，"),s("strong",[n._v("第三个参数为可选参数，值为一个函数，可以用来惰性提供初始状态")]),n._v("。这意味着我们可以使用使用一个 "),s("code",[n._v("init")]),n._v(" 函数来计算初始状态/值，而不是显式的提供值。如果初始值可能会不一样，这会很方便，最后会用计算的值来代替初始值。")]),n._v(" "),s("p",[n._v("reducer 接受两个参数一个是 state 另一个是 action ，用法原理和 redux 中的 reducer 一致。")]),n._v(" "),s("p",[n._v("useReducer 返回一个数组，数组中包含一个 state 和 dispath，state 是返回状态中的值，而 dispatch 是一个可以发布事件来更新 state 的函数。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function init(initialCount) { \n    return {count: initialCount}; \n} \n\nfunction reducer(state, action) { \n    switch (action.type) { \n        case 'increment': \n            return {count: state.count + 1}; \n        case 'decrement': \n            return {count: state.count - 1}; \n        case 'reset': \n            return init(action.payload); \n        default: \n            throw new Error(); \n    } \n} \n\nfunction Counter({initialCount}) { \n    const [state, dispatch] = useReducer(reducer, initialCount, init); \n    return ( \n        <> \n        Count: {state.count} \n<button \n    onClick={() => dispatch({type: 'reset', payload: initialCount})}> \n    Reset \n</button> \n<button onClick={() => dispatch({type: 'increment'})}>+</button> \n<button onClick={() => dispatch({type: 'decrement'})}>-</button> \n</> \n); \n} \n\nfunction render () { \n    ReactDOM.render(<Counter initialCount={0} />, document.getElementById('root')); \n}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br")])]),s("h5",{attrs:{id:"useeffect-和-uselayouteffect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#useeffect-和-uselayouteffect"}},[n._v("#")]),n._v(" useEffect 和 useLayoutEffect")]),n._v(" "),s("p",[n._v("这个两个hook差不多只有轻微的执行顺序上的不同先从"),s("code",[n._v("useEffect")]),n._v("说起吧")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("useEffect(func, array);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("第一个参数为 effect 函数，该函数将在 componentDidMmount 时触发和 componentDidUpdate 时有条件触发（该添加为 useEffect 的第二个数组参数）。同时该 effect 函数可以返回一个函数（returnFunction），returnFunction 将会"),s("strong",[n._v("在 componentWillUnmount 时触发")]),n._v("和"),s("strong",[n._v("在 componentDidUpdate 时先于 effect 有条件触发（先执行 returnFuncton 再执行 effect，比如需要做定时器的清除）")]),n._v("。 "),s("strong",[n._v("注意：")]),n._v(" 与 componentDidMount 和 componentDidUpdate 不同之处是，effect 函数触发时间为在浏览器完成渲染之后。 如果需要在渲染之前触发，需要使用 useLayoutEffect。")]),n._v(" "),s("p",[n._v("第二个参数 array 作为有条件触发情况时的条件限制：")]),n._v(" "),s("ul",[s("li",[n._v("如果不传，则每次 componentDidUpdate 时都会先触发 returnFunction（如果存在），再触发 effect。")]),n._v(" "),s("li",[n._v("如果为空数组"),s("code",[n._v("[]")]),n._v("，componentDidUpdate 时不会触发 returnFunction 和 effect。")]),n._v(" "),s("li",[n._v("如果只需要在指定变量变更时触发 returnFunction 和 effect，将该变量放入数组。")])]),n._v(" "),s("h5",{attrs:{id:"usecontext"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usecontext"}},[n._v("#")]),n._v(" useContext")]),n._v(" "),s("p",[n._v("看名字就知道是react里context的hook")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const Context = React.createContext('light');\n// Provider\nclass Provider extends Component {\n  render() {\n    return (\n      <Context.Provider value={'dark'}>\n        <DeepTree />\n      </Context.Provider>\n    )\n  }\n}\n// Consumer\nfunction Consumer(props) {\n  const context = useContext(Context)\n  return (\n    <div>\n      {context} // dark\n    </div>\n  )\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])]),s("h5",{attrs:{id:"useref"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#useref"}},[n._v("#")]),n._v(" useRef")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("import { React, useRef } from 'react'\nconst FocusInput = () => {\n  const inputElement = useRef()\n  const handleFocusInput = () => {\n    inputElement.current.focus()\n  }\n  return (\n    <>\n      <input type='text' ref={inputElement} />\n      <button onClick={handleFocusInput}>Focus Input</button>\n    </>\n  )\n}\nexport default FocusInput\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("p",[n._v("与createRef比 ，useRef创建的对象每次都返回一个相同的引用而createRef每次渲染都会返回一个新的引用")]),n._v(" "),s("h5",{attrs:{id:"usememo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usememo"}},[n._v("#")]),n._v(" useMemo")]),n._v(" "),s("p",[n._v("在没有hook时我们通常组件优化会用到pureComponent 之后又有为函数设计的memo方法，通过策略来判断是否更新。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 使用useMemo\nimport React, { useState,useMemo, memo } from 'react'\n\nconst Child = memo(({ config }) => {\n    console.log(config)\n    return <div style={{ color:config.color }}>{config.text}</div>\n})\n\nfunction MemoCount() {\n    const [count, setCount] = useState(0)\n    const [color, setColor] = useState('blue')\n    // 只会根据color的改变来返回不同的对象，否则都会返回同一个引用对象\n    const config = useMemo(()=>({\n        color,\n        text:color\n    }),[color])\n    \n    return (\n        <div>\n            <button\n                onClick={() => {\n                    setCount(count + 1)\n                }}\n                >\n                Update Count\n            </button>\n            <button\n                onClick={() => {\n                    setColor('green')\n                }}\n                >\n                Update Color\n            </button>\n            <div>{count}</div>\n            <Child config={config} />\n        </div>\n    )\n}\n\nexport default MemoCount\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);